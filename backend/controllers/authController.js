import User from "../models/userModel.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import sendEmail from "../utils/sendEmail.js";

dotenv.config();

// ‚úÖ Fonction pour g√©n√©rer un token JWT (Access Token - 1h)
const generateToken = (userId) => {
  return jwt.sign({ id: userId }, process.env.JWT_SECRET, { expiresIn: "1h" });
};

// ‚úÖ Fonction pour g√©n√©rer un Refresh Token (7 jours)
const generateRefreshToken = (userId) => {
  return jwt.sign({ id: userId }, process.env.REFRESH_SECRET, { expiresIn: "7d" });
};

export const register = async (req, res) => {
  try {
    const { name, email, password } = req.body;
    const userExists = await User.findOne({ email });

    if (userExists) {
      return res.status(400).json({ message: "Cet email est d√©j√† utilis√©." });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ name, email, password: hashedPassword, isVerified: false });

    await user.save();

    // ‚úÖ V√©rification que BACKEND_URL est bien d√©fini
    if (!process.env.BACKEND_URL) {
      console.error("‚ùå BACKEND_URL non d√©fini dans .env !");
      return res.status(500).json({ message: "Erreur serveur, BACKEND_URL manquant." });
    }

    // ‚úÖ G√©n√©ration du token de v√©rification
    const verificationToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "24h" });

    // ‚úÖ Correction de l'URL
    const verificationLink = `${process.env.BACKEND_URL}/api/auth/verify-email/${verificationToken}`;

    console.log(`üîó Lien de v√©rification envoy√© : ${verificationLink}`);

    // ‚úÖ Contenu de l'email
    const emailContent = `
      <h2>Bienvenue ${name}!</h2>
      <p>Cliquez sur le bouton ci-dessous pour v√©rifier votre email :</p>
      <a href="${verificationLink}" style="background: green; color: white; padding: 10px;">V√©rifier mon email</a>
      <p>Ce lien expirera dans 24 heures.</p>
    `;

    await sendEmail(email, "V√©rification de votre email", emailContent);

    return res.status(201).json({ message: "Inscription r√©ussie ! V√©rifiez votre email pour l'activer." });
  } catch (error) {
    console.error("üî• Erreur serveur lors de l'inscription :", error);
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};


export const verifyEmail = async (req, res) => {
  try {
    const { token } = req.params;

    if (!token) {
      return res.status(400).json({ message: "Token manquant." });
    }

    // ‚úÖ V√©rification du token JWT
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    if (!decoded.id) {
      return res.status(400).json({ message: "Token invalide." });
    }

    // ‚úÖ R√©cup√©ration de l'utilisateur
    const user = await User.findById(decoded.id);

    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©." });
    }

    // ‚úÖ V√©rification si l'utilisateur est d√©j√† valid√©
    if (user.isVerified) {
      return res.redirect(`${process.env.FRONTEND_URL}/login?verified=already`);
    }

    // ‚úÖ Mise √† jour du statut de v√©rification
    user.isVerified = true;
    await user.save();

    console.log(`‚úÖ Email v√©rifi√© pour l'utilisateur: ${user.email}`);

    return res.redirect(`${process.env.FRONTEND_URL}/login?verified=success`);
  } catch (error) {
    console.error("Erreur lors de la v√©rification de l'email :", error);
    return res.redirect(`${process.env.FRONTEND_URL}/login?verified=error`);
  }
};

export const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email }).select("name email role password isVerified");

    if (!user) return res.status(404).json({ message: "Utilisateur non trouv√©." });
    if (!user.isVerified) return res.status(403).json({ message: "Veuillez v√©rifier votre email avant de vous connecter." });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: "Mot de passe incorrect." });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });

    // ‚úÖ Stocker le token dans un cookie s√©curis√©
    res.cookie("token", token, {
      httpOnly: true, 
      secure: process.env.NODE_ENV === "production", 
      sameSite: "Lax"
    });

    console.log("üü¢ Cookie envoy√© :", token);
    console.log("üîç [Backend] - Utilisateur trouv√© :", user); // ‚úÖ V√©rification

    res.status(200).json({ 
      message: "Connexion r√©ussie", 
      user: { 
        id: user._id,
        name: user.name, 
        email: user.email,
        role: user.role // ‚úÖ Maintenant `role` est bien inclus
      } 
    });

  } catch (error) {
    console.error("üî¥ Erreur serveur :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};






// ‚úÖ R√©cup√©rer le profil utilisateur
export const getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password"); // Exclure le mot de passe

    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    res.status(200).json(user);
  } catch (error) {
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};


// ‚úÖ D√©connexion (Logout)
export const logout = (req, res) => {
  res.clearCookie("token");
  res.clearCookie("refreshToken");
  res.status(200).json({ message: "D√©connexion r√©ussie" });
};

export const verifyToken = (req, res) => {
  try {
    console.log("üü¢ Cookies re√ßus :", req.cookies); // ‚úÖ V√©rifie si le cookie `token` est re√ßu

    const token = req.cookies.token;
    if (!token) {
      return res.status(401).json({ message: "Non autoris√©, aucun token fourni" });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    res.status(200).json({ user: decoded });

  } catch (error) {
    console.error("üî¥ Erreur de v√©rification du token :", error);
    res.status(401).json({ message: "Token invalide ou expir√©." });
  }
};




// ‚úÖ Mot de passe oubli√©
export const forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©." });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "15m" });
    const resetLink = `${process.env.FRONTEND_URL}/reset-password/${token}`;

    const emailContent = `
      <h2>R√©initialisation de votre mot de passe</h2>
      <p>Cliquez ci-dessous pour r√©initialiser votre mot de passe :</p>
      <a href="${resetLink}" style="background: blue; color: white; padding: 10px;">R√©initialiser mon mot de passe</a>
    `;

    await sendEmail(user.email, "R√©initialisation du mot de passe", emailContent);

    res.status(200).json({ message: "Un email de r√©initialisation a √©t√© envoy√©." });
  } catch (error) {
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};


export const resetPassword = async (req, res) => {
  try {
    const { token } = req.params;
    const { newPassword } = req.body;

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.id);

    if (!user) return res.status(404).json({ message: "Utilisateur non trouv√©." });

    user.password = await bcrypt.hash(newPassword, 10);
    await user.save();

    res.status(200).json({ message: "Mot de passe r√©initialis√© avec succ√®s !" });
  } catch (error) {
    res.status(400).json({ message: "Lien invalide ou expir√©." });
  }
};