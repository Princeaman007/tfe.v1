// backend/routes/rentalRoutes.js - Mise √† jour
import express from "express";
import { 
    borrowBook, 
    returnBook, 
    getUserRentals, 
    getAllRentals, 
    getUserRentalsByAdmin,
    checkOverdueRentals,
    getUserRentalsDetailed,
    returnBookImproved,
    sendFineNotification
} from "../controllers/rentalController.js";

import { protect, isSuperAdmin } from "../middleware/authMiddleware.js";
import Rental from "../models/rentalModel.js";

const router = express.Router();

// üîπ Routes prot√©g√©es pour les utilisateurs connect√©s
router.post("/borrow", protect, borrowBook);   // ‚úÖ Emprunter un livre
router.post("/return", protect, returnBookImproved);   // ‚úÖ Retourner un livre (version am√©lior√©e)
router.get("/", protect, getUserRentals);      // ‚úÖ Voir ses propres locations (simple)
router.get("/detailed", protect, getUserRentalsDetailed); // ‚úÖ Voir ses locations avec d√©tails

// üîπ Gestion des locations (Superadmin uniquement)
router.get("/admin/all", protect, isSuperAdmin, getAllRentals);       // ‚úÖ Voir toutes les locations
router.get("/admin/user/:userId", protect, isSuperAdmin, getUserRentalsByAdmin); // ‚úÖ Voir les locations d'un utilisateur

// üîπ Routes de gestion des retards (Superadmin uniquement)
router.get("/admin/overdue", protect, isSuperAdmin, async (req, res) => {
    try {
        const overdueRentals = await Rental.find({ overdue: true })
            .populate("user", "name email")
            .populate("book", "title author");
        res.status(200).json(overdueRentals);
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur", error: error.message });
    }
});

// üîπ Forcer la v√©rification des retards (Superadmin uniquement)
router.get("/admin/check-overdue", protect, isSuperAdmin, async (req, res) => {
    try {
        await checkOverdueRentals();
        res.status(200).json({ message: "V√©rification des livres en retard effectu√©e avec succ√®s." });
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la v√©rification des retards.", error: error.message });
    }
});

router.get("/admin/fines", protect, isSuperAdmin, async (req, res) => {
    try {
        const unpaidFines = await Rental.find({ fineAmount: { $gt: 0 }, finePaid: false })
            .populate("user", "name email")
            .populate("book", "title author");

        res.status(200).json(unpaidFines);
    } catch (error) {
        res.status(500).json({ message: "Erreur serveur", error: error.message });
    }
});

// üîπ Forcer l'envoi des emails de rappel pour les amendes impay√©es (Admin uniquement)
router.get("/admin/send-fine-notifications", protect, isSuperAdmin, async (req, res) => {
    try {
        await sendFineNotification();
        res.status(200).json({ message: "Emails de rappel pour les amendes envoy√©s avec succ√®s." });
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de l'envoi des emails de rappel.", error: error.message });
    }
});

export default router;