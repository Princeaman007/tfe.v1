import { createContext, useContext, useEffect, useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import axios from "axios";
import { API_BASE_URL } from '../../config.js';

// Cr√©er le contexte avec une valeur par d√©faut pour √©viter l'erreur null
const AuthContext = createContext({
  isAuthenticated: false,
  user: null,
  login: () => {},
  logout: () => {},
  getAuthHeaders: () => ({}),
  loading: true
});

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const location = useLocation();

  // Helper pour configurer les headers avec token
  const getAuthHeaders = () => {
    const token = localStorage.getItem('token');
    return token ? { 'Authorization': `Bearer ${token}` } : {};
  };

  // V√©rification c√¥t√© client si le token JWT est expir√©
  const isTokenExpired = () => {
    const token = localStorage.getItem('token');
    if (!token) return true;
    
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const isExpired = payload.exp * 1000 < Date.now();
      console.log("üïê V√©rification expiration token:", { 
        exp: new Date(payload.exp * 1000), 
        now: new Date(), 
        isExpired 
      });
      return isExpired;
    } catch (error) {
      console.error("‚ùå Erreur parsing token:", error);
      return true;
    }
  };

  // V√©rification du token et r√©cup√©ration de l'utilisateur
  const verifyToken = async () => {
    try {
      console.log("V√©rification du token...");
      
      const token = localStorage.getItem('token');
      if (!token) {
        console.log("Aucun token trouv√©");
        clearAuthData();
        return false;
      }

      // V√©rification c√¥t√© client d'abord
      if (isTokenExpired()) {
        console.log("üïê Token expir√© c√¥t√© client");
        clearAuthData();
        return false;
      }

      const response = await axios.get(`${API_BASE_URL}/api/auth/verify`, {
        headers: getAuthHeaders()
      });

      console.log("Token v√©rifi√© :", response.data);

      if (response.status === 200 && response.data.user) {
        setIsAuthenticated(true);
        setUser(response.data.user);
        localStorage.setItem("user", JSON.stringify(response.data.user));
        return true;
      } else {
        console.log("Token invalide ou utilisateur non trouv√©");
        clearAuthData();
        return false;
      }
    } catch (error) {
      const status = error?.response?.status;
      console.error(
        "Erreur lors de la v√©rification du token :",
        status,
        error.response?.data?.message || error.message
      );
      // ‚ùóÔ∏èNe d√©connecter que si le serveur confirme que le token est invalide/expir√©
      if (status === 401 || status === 403) {
        console.log("üö® Token rejet√© par le serveur");
        clearAuthData();
        return false;
      }
      // üåê Erreur r√©seau/5xx/CORS temporaire ‚Üí conserver la session
      console.log("‚ö†Ô∏è Erreur r√©seau temporaire, conservation de la session");
      return true;
    } finally {
      setLoading(false);
    }
  };

  // Fonction pour nettoyer les donn√©es d'authentification
  const clearAuthData = () => {
    console.log("üßπ Nettoyage des donn√©es d'authentification");
    setIsAuthenticated(false);
    setUser(null);
    localStorage.removeItem("user");
    localStorage.removeItem("token");
  };

  // V√©rification intelligente de l'authentification
  const checkAuthStatus = () => {
    const token = localStorage.getItem('token');
    const user = localStorage.getItem('user');
    
    if (!token || !user) {
      console.log("‚ùå Token ou utilisateur manquant");
      return false;
    }
    
    if (isTokenExpired()) {
      console.log("üïê Token expir√©");
      clearAuthData();
      return false;
    }
    
    console.log("‚úÖ Authentification valide");
    return true;
  };

  // V√©rification p√©riodique du token pour auto-refresh
  useEffect(() => {
    if (!isAuthenticated) return;
    
    const checkTokenPeriodically = setInterval(async () => {
      if (isTokenExpiringSoon() && !isTokenExpired()) {
        console.log("üîÑ V√©rification p√©riodique: rafra√Æchissement du token");
        await autoRefreshToken();
      } else if (isTokenExpired()) {
        console.log("üïê Token expir√© d√©tect√© lors de la v√©rification p√©riodique");
        clearAuthData();
        navigate('/login');
        clearInterval(checkTokenPeriodically);
      }
    }, 5 * 60 * 1000); // V√©rifier toutes les 5 minutes
    
    return () => clearInterval(checkTokenPeriodically);
  }, [isAuthenticated, navigate]);

  // Initialisation avec v√©rification syst√©matique du token
  useEffect(() => {
    const initializeAuth = async () => {
      const storedUser = localStorage.getItem("user");
      const storedToken = localStorage.getItem("token");
      
      if (storedUser && storedToken) {
        try {
          // V√©rification c√¥t√© client d'abord
          if (isTokenExpired()) {
            console.log("üïê Token expir√© au d√©marrage, suppression");
            clearAuthData();
            setLoading(false);
            return;
          }

          const parsedUser = JSON.parse(storedUser);
          console.log("Utilisateur stock√© trouv√© :", parsedUser);

          // ‚úÖ Initialisation optimiste pour √©viter de "flasher" d√©connect√©
          setIsAuthenticated(true);
          setUser(parsedUser);
          
          // V√©rification du token c√¥t√© serveur
          const isValid = await verifyToken();
          
          if (!isValid) {
            console.log("Token invalide, suppression des donn√©es stock√©es");
          }
        } catch (error) {
          console.error("Erreur parsing utilisateur stock√© :", error);
          clearAuthData();
          setLoading(false);
        }
      } else {
        console.log("Aucun utilisateur/token stock√©");
        setLoading(false);
      }
    };

    initializeAuth();
  }, []);

  // Connexion avec gestion des tokens JWT
  const login = async (credentials) => {
    try {
      console.log("Tentative de connexion...");
      
      const response = await axios.post(`${API_BASE_URL}/api/auth/login`, credentials);

      console.log("Connexion r√©ussie :", response.data);

      if (response.status === 200 && response.data.token && response.data.user) {
        // Stocker le TOKEN JWT
        localStorage.setItem("token", response.data.token);
        console.log("Token stock√©");
        
        // Stocker l'utilisateur
        localStorage.setItem("user", JSON.stringify(response.data.user));
        
        setIsAuthenticated(true);
        setUser(response.data.user);

        // Redirection intelligente
        const from = location.state?.from?.pathname || "/dashboard";
        navigate(from);
        
        return { success: true };
      } else {
        throw new Error("Token ou utilisateur manquant dans la r√©ponse");
      }
    } catch (error) {
      console.error("Erreur de connexion :", error.response?.data?.message || error.message);
      const message = error.response?.data?.message || "Identifiants incorrects !";
      
      return { success: false, message };
    }
  };

  // Mise √† jour de l'utilisateur apr√®s un changement de profil
  const updateUserProfile = (updatedUser) => {
    console.log("Mise √† jour du profil utilisateur :", updatedUser);
    setUser(updatedUser);
    localStorage.setItem("user", JSON.stringify(updatedUser));
  };

  // Fonction pour v√©rifier si le token expire bient√¥t (dans les 10 minutes)
  const isTokenExpiringSoon = () => {
    const token = localStorage.getItem('token');
    if (!token) return true;
    
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const timeUntilExpiry = (payload.exp * 1000) - Date.now();
      const tenMinutes = 10 * 60 * 1000;
      
      console.log("üïê Temps avant expiration:", Math.floor(timeUntilExpiry / 1000 / 60), "minutes");
      return timeUntilExpiry < tenMinutes;
    } catch {
      return true;
    }
  };

  // Fonction pour rafra√Æchir automatiquement le token
  const autoRefreshToken = async () => {
    if (!isTokenExpiringSoon() || isTokenExpired()) {
      return false;
    }
    
    try {
      console.log("üîÑ Rafra√Æchissement automatique du token...");
      
      const response = await axios.post(`${API_BASE_URL}/api/auth/refresh-token`, {}, {
        headers: getAuthHeaders()
      });
      
      if (response.data.token) {
        localStorage.setItem('token', response.data.token);
        console.log("‚úÖ Token rafra√Æchi automatiquement");
        return true;
      }
    } catch (error) {
      console.error("‚ùå √âchec du rafra√Æchissement automatique:", error);
      if (error.response?.status === 401) {
        clearAuthData();
      }
    }
    
    return false;
  };

  // Fonction pour forcer la mise √† jour des donn√©es utilisateur
  const refreshUser = async () => {
    console.log("Actualisation des donn√©es utilisateur...");
    
    // Tentative de rafra√Æchissement automatique si n√©cessaire
    if (isTokenExpiringSoon() && !isTokenExpired()) {
      await autoRefreshToken();
    }
    
    // V√©rification c√¥t√© client d'abord
    if (!checkAuthStatus()) {
      console.log("‚ùå √âchec de la v√©rification d'authentification c√¥t√© client");
      return false;
    }
    
    // Puis v√©rification c√¥t√© serveur
    return await verifyToken();
  };

  // D√©connexion avec suppression des donn√©es stock√©es
  const logout = async () => {
    try {
      console.log("D√©connexion en cours...");
      
      // M√™me si le token est expir√©, essayez de notifier le serveur
      if (!isTokenExpired()) {
        await axios.post(`${API_BASE_URL}/api/auth/logout`, {}, { 
          headers: getAuthHeaders()
        });
      }

      clearAuthData();
      navigate("/");
      
      console.log("D√©connexion r√©ussie");
    } catch (error) {
      console.error("Erreur lors de la d√©connexion :", error);
      // M√™me en cas d'erreur, on d√©connecte localement
      clearAuthData();
      navigate("/");
    }
  };

  // Fonction utilitaire pour v√©rifier les permissions
  const hasRole = (requiredRole) => {
    if (!user || !user.role) return false;
    
    const userRole = user.role.toLowerCase();
    const required = requiredRole.toLowerCase();
    
    console.log(`V√©rification r√¥le: ${userRole} vs ${required}`);
    
    if (required === 'superadmin') {
      return userRole === 'superadmin';
    }
    if (required === 'admin') {
      return userRole === 'admin' || userRole === 'superadmin';
    }
    if (required === 'user') {
      return userRole === 'user' || userRole === 'admin' || userRole === 'superadmin';
    }
    
    return userRole === required;
  };

  // Helper pour faire des requ√™tes authentifi√©es
  const authAxios = axios.create({
    baseURL: API_BASE_URL
  });

  // Intercepteur pour ajouter automatiquement le token
  authAxios.interceptors.request.use((config) => {
    const token = localStorage.getItem('token');
    if (token && !isTokenExpired()) {
      config.headers.Authorization = `Bearer ${token}`;
    } else if (isTokenExpired()) {
      console.log("üïê Token expir√© d√©tect√© dans l'intercepteur");
      clearAuthData();
      // Optionnel: rediriger vers login
      // navigate('/login');
    }
    return config;
  });

  // Intercepteur pour g√©rer les r√©ponses d'erreur d'authentification
  authAxios.interceptors.response.use(
    (response) => response,
    (error) => {
      if (error.response?.status === 401 || error.response?.status === 403) {
        console.log("üö® Token rejet√© par le serveur dans intercepteur");
        clearAuthData();
        navigate('/login');
      }
      return Promise.reject(error);
    }
  );

  // Debug function
  const debugAuth = () => {
    console.log("=== DEBUG AUTH CONTEXT ===");
    console.log("isAuthenticated:", isAuthenticated);
    console.log("user:", user);
    console.log("user.role:", user?.role);
    console.log("loading:", loading);
    console.log("localStorage user:", localStorage.getItem("user"));
    console.log("localStorage token:", localStorage.getItem("token")?.substring(0, 20) + '...');
    console.log("Token expired?:", isTokenExpired());
    console.log("========================");
  };

  // √âviter le rendu avant que l'authentification soit v√©rifi√©e
  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: "100vh" }}>
        <div className="text-center">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Chargement...</span>
          </div>
          <p className="mt-2">V√©rification de l'authentification...</p>
        </div>
      </div>
    );
  }

  return (
    <AuthContext.Provider value={{ 
      isAuthenticated, 
      user, 
      login, 
      logout, 
      updateUserProfile,
      refreshUser,
      hasRole,
      debugAuth,
      loading,
      authAxios,
      getAuthHeaders,
      isTokenExpired,
      checkAuthStatus,
      isTokenExpiringSoon,
      autoRefreshToken
    }}>
      {children}
    </AuthContext.Provider>
  );
};

// Hook useAuth avec v√©rification de s√©curit√©
export const useAuth = () => {
  const context = useContext(AuthContext);
  
  // V√©rification critique pour √©viter l'erreur null
  if (context === undefined || context === null) {
    throw new Error("useAuth doit √™tre utilis√© dans un AuthProvider");
  }
  
  return context;
};